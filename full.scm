(define (make-point number1 number2) (cons number1 number2))  

(define (round-float a x)
(let ((power (expt 10 x)))
   (/ (round (* power a)) power)))

(define (is-line a b c)
(let ((X1 (car a)) (Y1 (cdr a))
       (X2 (car b)) (Y2 (cdr b))
       (X3 (car c)) (Y3 (cdr c)))
     (=(/(+(* X1 (- Y2 Y3)) (* X2 (- Y3 Y1)) (* X3 (- Y1 Y2)))2) 0)))


(define (distance a b) 
  (let ((X1 (car a)) (Y1 (cdr a))
         (X2 (car b)) (Y2 (cdr b)))
         (round-float (sqrt (+ (expt (- X2 X1) 2) (expt (- Y2 Y1) 2))) 5)))

(define (perimeter a b c)
(let ((X1 (car a)) (Y1 (cdr a))
       (X2 (car b)) (Y2 (cdr b))
       (X3 (car c)) (Y3 (cdr c)))
(round-float (+ (distance (make-point X1 Y1) (make-point X2 Y2)) 
   (distance (make-point X1 Y1) (make-point X3 Y3))
   (distance (make-point X2 Y2) (make-point X3 Y3))) 5)))


(define (area a b c)
(let ((X1 (car a)) (Y1 (cdr a))
       (X2 (car b)) (Y2 (cdr b))
       (X3 (car c)) (Y3 (cdr c)))
     (round-float (abs(/(+(* X1 (- Y2 Y3)) (* X2 (- Y3 Y1)) (* X3 (- Y1 Y2)))2)) 5)))

(define (angle a b c)
(let ((X (distance a b))
       (Y (distance b c))
       (Z (distance a c)))
(acos (/ (-(+(expt Y 2) (expt Z 2)) (expt X 2)) (* Y Z 2)))))

(define (calculate-triangle a b c)
(display "Side 1 = ")
(display (distance a b))
(newline)
(display "Side 2 = ")
(display (distance b c))
(newline)
(display "Side 3 = ")
(display (distance a c))
(newline)
(display "Perimeter = ")
(display (perimeter a b c))
(newline)
(display "Area = ")
(display (area a b c))
(newline)
(display "Angle 1 = ")
(display (round-float (angle a b c) 5))
(display "  ")
(display (round-float (/(* 180 (angle a b c)) 3.141592653589793) 5))
(newline)
(display "Angle 2 = ")
(display (round-float (angle b c a) 5))
(display "  ")
(display (round-float (/(* 180 (angle b c a)) 3.141592653589793) 5))
(newline)
(display "Angle 3 = ")
(display (round-float (angle c a b) 5))
(display "  ")
(display (round-float (/(* 180 (angle c a b)) 3.141592653589793) 5)))

(display "TEST 1: ----- make-point			(2 . 3)")
(newline)
(display (make-point 2 3))
(newline)

(display "TEST 2: ----- is-line				#t")
(newline)
(display (is-line (make-point 1 3) (make-point 2 6) (make-point 3 9)))
(newline)

(display "TEST 3: ----- is-line				#f")
(newline)
(display (is-line (make-point 2 2) (make-point 5 2) (make-point 3.5 -2)))
(newline)

(display "TEST 4: ----- distance			3.1622")
(newline)
(display (distance (make-point 1 3) (make-point 2 6)))
(newline)

(display "TEST 5: ----- perimeter			11.5440")
(newline)
(display (perimeter (make-point 2 2) (make-point 5 2) (make-point 3.5 -2)))
(newline)

(display "TEST 6: ----- area				5.9999")
(newline)
(display (area (make-point 2 2) (make-point 5 2) (make-point 3.5 -2)))
(newline)

(display "TEST 7: ----- calculate-triangle	5.9999")
(newline)
(calculate-triangle (make-point 2 2) (make-point 5 2) (make-point 3.5 -2))
(newline)
(newline)

(display "TEST 8: ----- Infinite Slope		#t")
(newline)
(display (is-line (make-point 2 2) (make-point 2 3) (make-point 2 -2)))
(newline)


(newline)
(newline)

(exit)
